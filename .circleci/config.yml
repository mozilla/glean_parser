---
version: 2.1

commands:
  # Required for testing the `rust_server` implementation
  setup-rust-toolchain:
    steps:
      - run:
          name: Installing rustup
          command: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run:
          name: Setup custom Rust environment variables
          command: |
            echo 'export PATH=$HOME/.cargo/bin:$PATH' >> $BASH_ENV
            echo "export RUST_BACKTRACE=1" >> $BASH_ENV
            echo "export CARGO_INCREMENTAL=0" >> $BASH_ENV

  setup-uv:
    steps:
      - run:
          name: Installing uv
          # To update:
          # 1. Pick a release from https://github.com/astral-sh/uv/releases/
          # 2. Download the checksum.
          # 3. Replace the version in `UV_VERSION` with the selected version.
          # 4. Replace the checksum in `UV_SHA256` with the checksum from the downloaded file.
          command: |
            cd /tmp
            UV_SHA256=f6788fd45a25ea1033a671eaa9ece6c9b004ce5c9cf09552effadde567a7d7a5
            UV=uv-x86_64-unknown-linux-gnu
            UV_VERSION=0.6.13
            URL="https://github.com/astral-sh/uv/releases/download/${UV_VERSION}/${UV}.tar.gz"
            curl -sfSL --retry 5 -o "${UV}.tar.gz" "${URL}"
            echo "${UV_SHA256} *${UV}.tar.gz" | shasum -a 256 -c -
            tar -xf "${UV}.tar.gz"
            mv ./${UV}/* ~/.local/bin/
      - run:
          name: Set path for local binaries
          command: |
            echo 'export PATH=.:$HOME/.local/bin:$PATH' >> $BASH_ENV

  test-start:
    steps:
      - checkout
      - run:
          name: Install glean_parser
          command: CC=broken_compiler uv sync

  test-min-requirements:
    steps:
      - run:
          name: Install minimum requirements
          command: |
            uv sync --resolution lowest-direct

  test-python-version:
    steps:
      - run:
          name: Install required native dependencies
          command: |
            sudo apt update -q
            sudo apt install \
                --yes --no-install-recommends \
                openjdk-11-jdk-headless \
                ruby \
                golang-go
            make install-kotlin-linters
      - setup-rust-toolchain
      - run:
          name: Test
          command: make test-full

  lint:
    steps:
      - run:
          name: Lint
          command: make lint

  license-check:
    steps:
      - run:
          name: License check
          command: |
            uv run pip-licenses --fail-on 'GNU General Public License v3 (GPLv3)' --ignore-packages yamllint

jobs:
  build-38:
    docker:
      - image: cimg/python:3.8-node
    steps:
      - setup-uv
      - test-start
      - test-python-version

  build-38-min:
    docker:
      - image: cimg/python:3.8-node
    steps:
      - setup-uv
      - test-start
      - test-min-requirements
      - test-python-version

  build-39:
    docker:
      - image: cimg/python:3.9-node
    steps:
      - test-start
      - test-python-version

  build-310:
    docker:
      - image: cimg/python:3.10-node
    steps:
      - test-start
      - test-python-version

  build-311:
    docker:
      - image: cimg/python:3.11-node
    steps:
      - test-start
      - test-python-version

  build-312:
    docker:
      - image: cimg/python:3.12-node
    steps:
      - test-start
      - test-python-version
      - run:
          name: Build docs
          command: |
            make docs
            touch docs/_build/html/.nojekyll
      - persist_to_workspace:
          root: docs/_build
          paths: html

  lint:
    docker:
      - image: cimg/python:3.12
    steps:
      - test-start
      - lint

  license-check:
    docker:
      - image: cimg/python:3.12
    steps:
      - test-start
      - license-check

  docs-deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "9b:25:aa:bf:39:b6:4a:e7:c3:52:cf:ab:23:81:3d:52"
      - attach_workspace:
          at: docs/_build
      - run:
          name: Install gh-pages
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "glean-ci@nowhere.com"
            git config user.name "glean-ci"
      - run:
          name: Deploy docs
          command: |
            gh-pages --dotfiles --message "[ci skip] updates" --dist docs/_build/html

  pypi-deploy:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run:
          name: Release package on PyPi
          # Requires that the TWINE_USERNAME and TWINE_PASSWORD environment
          # variables are configured in CircleCI's environment variables.
          command: |
            make release

workflows:
  version: 2
  build:
    jobs:
      - lint:
          filters:
            tags:
              only: /.*/
      - license-check:
          filters:
            tags:
              only: /.*/
      - build-38:
          filters:
            tags:
              only: /.*/
      - build-38-min:
          filters:
            tags:
              only: /.*/
      - build-39:
          filters:
            tags:
              only: /.*/
      - build-310:
          filters:
            tags:
              only: /.*/
      - build-311:
          filters:
            tags:
              only: /.*/
      - build-312:
          filters:
            tags:
              only: /.*/
      - docs-deploy:
          requires:
            - build-312
          filters:
            branches:
              only: main
      - pypi-deploy:
          requires:
            - build-39
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*/
