{# The final Javascript code is autogenerated, but this
Jinja2 template is not. Please file bugs! #}
{% macro obj_declaration(obj) %}
new {{ obj.type|class_name }}({
            {% for arg_name in (obj.type|args).common if obj[arg_name] is defined %}
            {{ arg_name|camelize }}: {{ obj[arg_name]|js }},
            {% endfor %}
        }, {% for arg_name in (obj.type|args).extra if obj[arg_name] is defined %}{{ obj[arg_name]|js }}{% endfor %}){% endmacro %}
/* eslint-disable */

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

"use strict";

// AUTOGENERATED BY glean_parser.  DO NOT EDIT.

// Global variable to use when in Qt/QML environments,
// where do not have access to the global object (i.e. window);
var {{ category_name|camelize }};

// Universal Module Definition (UMD) template based on:
// https://github.com/umdjs/umd/blob/master/templates/returnExports.js
(function (root, factory) {
    if (typeof define === "function" && define.amd) {
        // AMD. Register as an anonymous module.
        define(["@mozilla/glean/{{ glean_namespace }}"], factory);
    } else if (typeof module === "object" && module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports, like Node.
        module.exports = factory(require("@mozilla/glean/{{ glean_namespace }}"));
    } else if (typeof root === "undefined") {
        // In Qt/QML environments we can't change the global object from Javascript.
        // We will simply assing to a global variable in this case.
        {{ category_name|camelize }} = factory({{ glean_namespace }}.Glean);
    } else {
        // Browser globals (root is window)
        if (!root["{{ namespace }}"]) {
            root["{{ namespace }}"] = {};
        }
        root["{{ namespace }}"]["{{ category_name|camelize }}"] = factory(root.{{ glean_namespace }});
    }
})(typeof self !== "undefined" ? self : this, function(Glean) {
    {% if objs %}
    return {
        {% for obj in objs.values() %}
        /**
        * {{ obj.description|wordwrap() | replace("\n", "\n        * ") }}
        *
        * Generated from `{{ obj.identifier() }}`.
        */
        {{ obj.name|camelize }}: {{ obj_declaration(obj) }},
        {% endfor %}
    };
    {% endif %}
});
