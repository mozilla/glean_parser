// {# The final Rust code is autogenerated, but this template is not. Please file bugs if there is a problem! #}
use glean;

// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

// AUTOGENERATED BY glean_parser v{{ parser_version }}. DO NOT EDIT.

// Required imports
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};
use serde_json::Value;
use std::collections::HashMap;

// log type string used to identify logs to process in the Moz Data Pipeline
const GLEAN_EVENT_MOZLOG_TYPE: &str = "glean-server-event";

struct GleanEventsLogger {
    // Application Id to identify application per Glean standards
    app_id: String,
    // Version of application emitting the event
    app_display_version: String,
    // Channel to differentiate logs from prod/beta/staging/devel
    app_channel: String,
}

// Exported type for public method parameters
// Default impl empty values will be omitted in json from ping struct definition
#[derive(Default)]
struct RequestInfo {
    user_agent: String,
    ip_address: String,
}

// *************
// let defaultRequestInfo = RequestInfo {
//     UserAgent: "".to_owned(),
//     IpAddress: "".to_owned(),
// }
// ********************

// Struct to construct the glean ping
#[derive(Serialize, Deserialize, Debug)]
struct ClientInfo {
    telemetry_sdk_build: String,
    fist_run_date: String,
    os: String,
    os_version: String,
    architecture: String,
    app_build: String,
    app_display_version: String,
    app_channel: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct PingInfo {
    seq: String,
    start_time: String,
    end_time: String,
}

#[derive(Serialize, Deserialize, Debug)]
struct Ping {
    document_namespace: String,
    document_type: String,
    document_version: String,
    document_id: String,
    user_agent: String,
    ip_address: String,
    payload: String,
}

// *******************
// Metrics = HashMap<String, HashMap<String, Value>>;

#[derive(Debug, Serialize, Deserialize)]
struct GleanEvent {
    category: String,
    name: String,
    timestamp: chrono::DateTime<Utc>,
    extra: HashMap<String, String>,
}

// **************
#[derive(Serialize, Deserialize, Debug)]
struct PingPayload {
    client_info: ClientInfo,
    ping_info: PingInfo,
    metrics: Metrics,
    events: GleanEvent, // *********
}

struct LogEnvelope {
    timestamp: String,
    logger: String,
    log_type: String,
    fields: Ping,
}
